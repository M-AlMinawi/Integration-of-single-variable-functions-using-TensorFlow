#Needed imports
import tensorflow as tf
from math import pi
import time
import numpy as np
import tensorflow_probability as tfp
import csv
import psutil as ps

#Testing code

# muons = False
muons = True
if muons:
    SigShape = lambda loc, scale: tfd.Normal(loc, scale)
else:
    SigShape = lambda loc, scale: tfd.Mixture(
  cat=tfd.Categorical(probs=tf.constant([0.97, 0.03], dtype=tf.float64)),
  components=[tfd.Normal(loc, scale*5), tfd.Normal(loc, scale*50)])
tfd = tfp.distributions
mix = tf.convert_to_tensor([5, 10, 90, 0.1, 0.3, 0.3e-1, 1e-2, 0.01], tf.float64)
mix = mix / np.sum(mix)
mixture = tfd.Mixture(
  cat=tfd.Categorical(probs=mix),
  components=[
    tfd.Normal(loc=tf.constant(3., tf.float64), scale=3.5),
    SigShape(loc=tf.constant(3.68, tf.float64), scale=0.2e-2),  # psi(2S)
    SigShape(loc=tf.constant(3.01, tf.float64), scale=0.5e-2),  # J/psi
    tfd.Normal(loc=tf.constant(4.1, tf.float64), scale=1e-1),
    tfd.Exponential(tf.constant(9, tf.float64)),
    tfd.Normal(loc=tf.constant(4.5, tf.float64), scale=1.1e-1),
    tfd.Cauchy(loc=tf.constant(4.2, tf.float64), scale=0.3),
    tfd.Poisson(rate=tf.constant(2.4, tf.float64)),
])


functions = [lambda x: (x+1)/(x**3 + x**2 - 6*x),lambda x: (2*tf.math.sin(x))**7
,lambda x: tf.math.cos(tf.math.exp(x))*tf.math.exp(x),lambda x: 1/(1+2500* x**2)
,lambda x: (-1/x**2) * tf.math.cos(1/x),lambda x: x**2 * tf.math.cosh(x)*tf.math.exp(tf.math.exp(x**2))*tf.math.sinh(x),
lambda x: tf.math.exp(-x) * (x**6),lambda x: 250* tf.math.exp(-15000* x**2),
lambda x: tf.math.exp(tf.math.cos(tf.math.exp(x)))-x*tf.math.exp(tf.math.cos(tf.math.exp(x))+x)*tf.math.sin(tf.math.exp(x))
    ,lambda x: mixture.prob(x)]

sol_func = [lambda x: ((-4*tf.math.log(tf.abs(x+3)) -5*tf.math.log(tf.abs(x))
 +9*tf.math.log(tf.abs(x-2)))/30),lambda x: 128*((tf.math.cos(x)**7)/7 -  3*(tf.math.cos(x)**5)/5
+ tf.math.cos(x)**3 - tf.math.cos(x)),lambda x: tf.math.sin(tf.math.exp(x)), lambda x: tf.math.atan(50*x)/50 , lambda x:
tf.math.sin(1/x),lambda x:tf.cast(0,dtype=tf.float64), lambda x: tf.where(x>0,tf.cast(720,dtype=tf.float64),tf.cast(0,dtype=tf.float64)),
lambda x:tf.where(x>0,250*tf.math.sqrt(tf.cast(pi/15000,dtype=tf.float64)),0),
lambda x: x*tf.math.exp(tf.math.cos(tf.math.exp(x))),lambda x:tf.where(x>2.5,mixture.cdf(x),mixture.cdf(x))]


low_lims = tf.convert_to_tensor([0.01,0,5,-1,-0.5,-1,0,-0.04,1,0.1],dtype=tf.float64)
up_lims = tf.convert_to_tensor([1.99,pi,9,1,-0.02,1,35,0.04,7,5.0],dtype=tf.float64)

n=1 #n= 1,2,3,4, ... 10
integrand = functions[n-1]
tol_array = [1e-4,5e-4,1e-5,5e-5,1e-6,5e-6,1e-7,5e-7,1e-8,5e-8,1e-9,5e-9,1e-10,5e-10,1e-11,5e-11,1e-12]
tol_array.sort(reverse=True)
tol_array = tf.convert_to_tensor(tol_array,dtype=tf.float64)
print(f"function number {n}")
answer = sol_func[n - 1](up_lims[n - 1]) - sol_func[n - 1](low_lims[n - 1])

#Kronrod_Gauss-quadrature


for i in range(len(tol_array)):
   q = Kronrod_Gauss(low_lims[n-1],up_lims[n-1],tol_array[i])
   print(q[0])
   print(tf.abs(q[0] - answer).numpy())
   iter_table = []
   for j in range(30):
       iter_vals = []
       start = time.time()
       a = Kronrod_Gauss(low_lims[n-1],up_lims[n-1], tol_array[i])
       stop = time.time()
       err = tf.abs(a[0] - answer).numpy()
       timing = stop - start
       iter_vals.append(a[0].numpy())
       iter_vals.append(timing)
       iter_vals.append(a[2].numpy())
       iter_vals.append(err)
       iter_vals.append(tol_array[i])
       iter_table.append(iter_vals)
   average = [(tf.reduce_sum(col).numpy()/len(col)) for col in zip(*iter_table)]
   with open(f'Kronrod gauss {n} raw.csv', 'a', newline='')   as myfile:
       wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
       wr.writerows(iter_table)
   with open(f'Kronrod gauss {n} avg.csv', 'a', newline='')   as myfile:
       wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
       wr.writerow(average)
   with open(f'Kronrod gauss CPU and RAM usage {n}.txt','a',newline='') as file:
       file.write(f'CPU percent = {str(ps.cpu_percent())} \r\n')
       file.write(f'RAM usage = {str(ps.virtual_memory())}\r\n')

#Romberg_Gauss method

for i in range(len(tol_array)):
    q = romberg(low_lims[n-1],up_lims[n-1],tol_array[i])

    print("result=", q[0])
    print("correct answer", answer)
    print("error=", tf.abs(q[0] - answer).numpy())
    iter_table = []
    for j in range(30):
        iter_vals = []
        start = time.time()
        a = romberg(low_lims[n-1],up_lims[n-1], tol_array[i])
        err = tf.abs(a[0] - answer).numpy()
        stop = time.time()
        timing = stop - start
        iter_vals.append(a[0].numpy())
        iter_vals.append(timing)
        iter_vals.append(a[2].numpy())
        iter_vals.append(err)
        iter_vals.append(tol_array[i])
        iter_table.append(iter_vals)
    average = [(tf.reduce_sum(col).numpy()/len(col)) for col in zip(*iter_table)]
    with open(f'Romberg gauss {n} raw.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerows(iter_table)
    with open(f'Romberg gauss {n} avg.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerow(average)
    with open(f'Romberg gauss CPU and RAM usage {n}.txt','a',newline='') as file:
        file.write(f'CPU percent = {str(ps.cpu_percent())} \r\n')
        file.write(f'RAM usage = {str(ps.virtual_memory())}\r\n')
		
#Adaptive Simpson's method
for i in range(len(tol_array)):
    q = adaptive_simpson_diff(low_lims[n-1],up_lims[n-1],tol_array[i],21)
    print("result=", q[0])
    print("correct answer", answer)
    print("error=", tf.abs(q[0] - answer).numpy())
    print("tolerance=",tol_array[i])
    print("num evals=", len(q[1].numpy()))
    print("num iterations",q[2].numpy())
    iter_table = []
    for j in range(30):
        iter_vals = []
        start = time.time()
        a = adaptive_simpson_diff(low_lims[n-1],up_lims[n-1],tol_array[i],21)
        stop = time.time()
        timing = stop - start
        err = tf.abs(a[0] - answer).numpy()
        iter_vals.append(a[0].numpy())
        iter_vals.append(timing)
        iter_vals.append(len(a[1].numpy()))
        iter_vals.append(a[2].numpy())
        iter_vals.append(err)
        iter_table.append(iter_vals)
    average = [(tf.reduce_sum(col).numpy()/len(col)) for col in zip(*iter_table)]
    with open(f'Adaptive simpson {n} raw.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerows(iter_table)
    with open(f'Adaptive simpson {n} avg.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerow(average)
    with open(f'Adaptive simpson CPU and RAM usage {n}.txt','a',newline='') as file:
        file.write(f'CPU percent = {str(ps.cpu_percent())} \r\n')
        file.write(f'RAM usage = {str(ps.virtual_memory())}\r\n')
		
#Romberg method

for i in range(len(tol_array)):
    q = romberg(low_lims[n-1],up_lims[n-1],tol_array[i],5)

    print(tf.abs(q[0]-answer).numpy())
    iter_table = []
    for j in range(30):
        iter_vals = []
        start = time.time()
        a = romberg(low_lims[n-1],up_lims[n-1], tol_array[i],5)
        err = tf.abs(a[0] - answer).numpy()
        stop = time.time()
        timing = stop - start
        iter_vals.append(a[0].numpy())
        iter_vals.append(timing)
        iter_vals.append(a[2].numpy())
        iter_vals.append(err)
        iter_vals.append(tol_array[i])
        iter_table.append(iter_vals)
    average = [(tf.reduce_sum(col).numpy()/len(col)) for col in zip(*iter_table)]
    with open(f'Romberg {n} raw.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerows(iter_table)
    with open(f'Romberg {n} avg.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerow(average)
    with open(f'Romberg CPU and RAM usage {n}.txt','a',newline='') as file:
        file.write(f'CPU percent = {str(ps.cpu_percent())} \r\n')
        file.write(f'RAM usage = {str(ps.virtual_memory())}\r\n')	

#Adaptive trapezium method

for i in range(len(tol_array)):
    q = adaptive_trapezium_diff(low_lims[n-1],up_lims[n-1],tol_array[i],18)
    print("result=",q[0])
    print("correct answer",answer)
    print("error=",tf.abs(q[0]-answer).numpy())
    iter_table = []
    for j in range(30):
        iter_vals = []
        start = time.time()
        a = adaptive_trapezium_diff(low_lims[n-1],up_lims[n-1],tol_array[i],18)
        stop = time.time()
        timing = stop - start
        err = tf.abs(a[0] - answer).numpy()
        iter_vals.append(a[0].numpy())
        iter_vals.append(timing)
        iter_vals.append(len(a[1].numpy()))
        iter_vals.append(a[2].numpy())
        iter_vals.append(err)
        iter_table.append(iter_vals)
    average = [(tf.reduce_sum(col).numpy()/len(col)) for col in zip(*iter_table)]
    with open(f'Adaptive trapezium {n} raw.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerows(iter_table)
    with open(f'Adaptive trapezium {n} avg.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerow(average)
    with open(f'Adaptive trapezium CPU and RAM usage {n}.txt','a',newline='') as file:
        file.write(f'CPU percent = {str(ps.cpu_percent())} \r\n')
        file.write(f'RAM usage = {str(ps.virtual_memory())}\r\n')		

#Legendre_Gauss_quadrature
		
for i in range(len(tol_array)):
    q = Legendre_Gauss(low_lims[n-1],up_lims[n-1],tol_array[i])

    print(q[0])
    print(tf.abs(q[0] - answer).numpy())
    iter_table = []
    for j in range(30):
        iter_vals = []
        start = time.time()
        a = Legendre_Gauss(low_lims[n-1],up_lims[n-1], tol_array[i])
        stop = time.time()
        ans = tf.abs(a[0] - answer).numpy()
        timing = stop - start
        iter_vals.append(a[0].numpy())
        iter_vals.append(timing)
        iter_vals.append(a[2].numpy())
        iter_vals.append(ans)
        iter_vals.append(tol_array[i])
        iter_table.append(iter_vals)
    average = [(tf.reduce_sum(col).numpy()/len(col)) for col in zip(*iter_table)]
    with open(f'Legendre gauss {n} raw.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerows(iter_table)
    with open(f'Legendre gauss {n} avg.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerow(average)
    with open(f'Legendre gauss CPU and RAM usage {n}.txt','a',newline='') as file:
        file.write(f'CPU percent = {str(ps.cpu_percent())} \r\n')
        file.write(f'RAM usage = {str(ps.virtual_memory())}\r\n')		
		
#Romberg_Simpson_method

for i in range(len(tol_array)):
    q = romberg(low_lims[n-1],up_lims[n-1],tol_array[i],5)
    print(tf.abs(q[0]-answer).numpy())
    iter_table = []
    for j in range(30):
        iter_vals = []
        start = time.time()
        a = romberg(low_lims[n-1],up_lims[n-1], tol_array[i],5)
        stop = time.time()
        err = tf.abs(a[0] - answer).numpy()
        timing = stop - start
        iter_vals.append(a[0].numpy())
        iter_vals.append(timing)
        iter_vals.append(a[1].numpy())
        iter_vals.append(err)
        iter_vals.append(tol_array[i])
        iter_table.append(iter_vals)
    average = [(tf.reduce_sum(col).numpy()/len(col)) for col in zip(*iter_table)]
    with open(f'Romberg simpson {n} raw.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerows(iter_table)
    with open(f'Romberg simpson {n} avg.csv', 'a', newline='')   as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
        wr.writerow(average)
    with open(f'Romberg simpson CPU and RAM usage {n}.txt','a',newline='') as file:
        file.write(f'CPU percent = {str(ps.cpu_percent())} \r\n')
        file.write(f'RAM usage = {str(ps.virtual_memory())}\r\n')
		